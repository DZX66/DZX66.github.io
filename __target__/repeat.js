'use strict';import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,__ipow__,
__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,filter,float,getattr,
hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";var __name__="__main__";print("\u6ce8\u610f\uff1a\u4e0d\u4f1a\u81ea\u52a8\u6dfb\u52a0\u6807\u70b9\u7b26\u53f7\uff0c\u9700\u624b\u52a8\u6dfb\u52a0");export var intro=input("\u524d\u8a00\uff1a");export var repeat="";while(repeat==""||repeat==null||!__in__("[replace]",
repeat)){var repeat=input("\u91cd\u590d\u6a21\u677f\uff08\u4f7f\u7528[replace]\u6765\u4ee3\u66ff\u8981\u66ff\u6362\u7684\u5b57\u7b26\uff09\uff1a");if(repeat==""||repeat==null)print("\u4e0d\u80fd\u4e3a\u7a7a");else if(!__in__("[replace]",repeat))print("\u5fc5\u987b\u5305\u542b[replace]")}export var end=input("\u7ed3\u8bed\uff1a");export var body=[];while(true){var res=input(repeat+"\uff08\u8f93\u5165quit\u7ed3\u675f\uff0c\u6309\u56de\u8f66\u786e\u5b9a\uff09\uff1a");if(res=="quit")break;else if(res==
""||res==null)print("\u4e0d\u80fd\u4e3a\u7a7a");else body.append(res)}print("\n=====\u7ed3\u679c=====\n");export var result=[];result.append(intro);for(var i of body)result.append(repeat.py_replace("[replace]",i));result.append(end);var result="".join(result);print(result);print();input("");

//# sourceMappingURL=repeat.map